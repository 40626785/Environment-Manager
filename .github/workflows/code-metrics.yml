name: Code Quality Metrics

on:
  push:
    branches: [ feature/code-metrics ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  analyze:
    name: Analyze Code Metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
            
    - name: Setup directories
      run: |
        mkdir -p metrics/reports
              
    - name: Generate code metrics
      shell: pwsh
      run: |
        # Analyze codebase using PowerShell
        $codeFiles = (Get-ChildItem -Path "EnvironmentManager" -Filter "*.cs" -Recurse | 
                    Where-Object { $_.FullName -notmatch "\\obj\\" -and $_.FullName -notmatch "\\bin\\" }).Count
        
        # Calculate documentation coverage
        $totalPublicMembers = 0
        $documentedMembers = 0
        
        $csFiles = Get-ChildItem -Path "EnvironmentManager" -Filter "*.cs" -Recurse | 
            Where-Object { $_.FullName -notmatch "\\obj\\" -and $_.FullName -notmatch "\\bin\\" }
            
        foreach ($file in $csFiles) {
            $content = Get-Content -Path $file.FullName -Raw -ErrorAction SilentlyContinue
            if ($content) {
                # Count public members
                $memberMatches = [regex]::Matches($content, "public\s+(static\s+)?(virtual\s+)?(\w+)(\s+\w+)?\s+(\w+)")
                $totalPublicMembers += $memberMatches.Count
                
                # Count documented members
                $docMatches = [regex]::Matches($content, "///\s*<summary>[\s\S]*?///\s*</summary>")
                $documentedMembers += $docMatches.Count
            }
        }
        
        if ($totalPublicMembers -gt 0) {
            $docCoverage = [math]::Round(($documentedMembers / $totalPublicMembers) * 100, 1)
        }
        else {
            $docCoverage = 0
        }
        
        # Calculate cyclomatic complexity
        $totalComplexity = 0
        $methodCount = 0
        
        foreach ($file in $csFiles) {
            $content = Get-Content -Path $file.FullName -Raw -ErrorAction SilentlyContinue
            if ($content) {
                # Count methods
                $methodMatches = [regex]::Matches($content, "(public|private|protected|internal)\s+(static\s+)?(virtual\s+)?(\w+)(\s+\w+)?\s+(\w+)\s*\(")
                $methodCount += $methodMatches.Count
                
                # Calculate complexity based on conditional statements
                $ifCount = [regex]::Matches($content, "\sif\s*\(").Count
                $forCount = [regex]::Matches($content, "\sfor\s*\(").Count
                $foreachCount = [regex]::Matches($content, "\sforeach\s*\(").Count
                $whileCount = [regex]::Matches($content, "\swhile\s*\(").Count
                $switchCount = [regex]::Matches($content, "\sswitch\s*\(").Count
                $caseCount = [regex]::Matches($content, "\scase\s+").Count
                
                $totalBranches = $ifCount + $forCount + $foreachCount + $whileCount + $switchCount + $caseCount
                $totalComplexity += $totalBranches
            }
        }
        
        if ($methodCount -gt 0) {
            $complexity = [math]::Round($totalComplexity / $methodCount, 1)
        }
        else {
            $complexity = 0
        }
        
        # Calculate maintainability index (simplified approximation)
        # Halstead Volume approximation: Lines of code / methods
        # Maintainability is inversely related to complexity and code size, directly related to comment percentage
        $totalLinesOfCode = 0
        $totalCommentLines = 0
        
        foreach ($file in $csFiles) {
            $content = Get-Content -Path $file.FullName -ErrorAction SilentlyContinue
            if ($content) {
                $totalLinesOfCode += $content.Count
                $commentLines = $content | Where-Object { $_ -match "^\s*//|^\s*///|^\s*/\*|^\s*\*" }
                $totalCommentLines += $commentLines.Count
            }
        }
        
        if ($totalLinesOfCode -gt 0) {
            $commentPercentage = ($totalCommentLines / $totalLinesOfCode) * 100
            
            # Approximation of maintainability index based on:
            # - Lower complexity is better (inverse relationship)
            # - More comments are better (direct relationship)
            # - Fewer lines per method are better (inverse relationship)
            
            $linesPerMethod = if ($methodCount -gt 0) { $totalLinesOfCode / $methodCount } else { 100 }
            $maintainability = 100 - ($complexity * 0.2) + ($commentPercentage * 0.4) - ($linesPerMethod * 0.1)
            $maintainability = [math]::Max(0, [math]::Min(100, [math]::Round($maintainability, 1)))
        }
        else {
            $maintainability = 0
        }
        
        # Create metrics report content
        $summaryContent = "# Environment Manager Code Quality Metrics`n`n"
        
        $summaryContent += "| Metric | Value | Target |`n"
        $summaryContent += "|--------|-------|--------|`n"
        $summaryContent += "| Cyclomatic Complexity (Avg) | $complexity | <15 |`n"
        $summaryContent += "| Maintainability Index | $maintainability | >80 |`n"
        $summaryContent += "| Documentation Coverage | $docCoverage% | >90% |`n"
        
        $summaryContent += "`n## Code Statistics`n"
        $summaryContent += "- Files: $codeFiles`n"
        $summaryContent += "- Methods: $methodCount`n"
        $summaryContent += "- Public Members: $totalPublicMembers`n"
        $summaryContent += "- Documented Members: $documentedMembers`n"
        $summaryContent += "- Total Lines of Code: $totalLinesOfCode`n"
        $summaryContent += "- Comment Lines: $totalCommentLines`n"
        
        $metricsOutput = "metrics/reports/metrics_summary.md"
        Set-Content -Path $metricsOutput -Value $summaryContent
        
        # Display the report in the logs
        Get-Content $metricsOutput
        
    - name: List Generated Reports
      run: |
        echo "Generated reports:"
        ls -la metrics/reports/

    - name: Upload metrics reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics-reports
        path: metrics/reports/ 