name: Code Quality Metrics

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'EnvironmentManager/**'
      - 'EnvironmentManager.Test/**'
      - '.github/workflows/code-metrics.yml'
  push:
    branches: [ feature/code-metrics ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  analyze:
    name: Analyze Code Metrics
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Setup PowerShell
      uses: microsoft/powershell@v1
      with:
        pwsh-version: 7.3
    
    - name: Install required tools
      run: |
        dotnet tool install --global dotnet-metrics
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Run Code Metrics Analysis
      shell: pwsh
      run: |
        chmod +x ./metrics/AnalyzeCodeMetrics.ps1
        ./metrics/AnalyzeCodeMetrics.ps1
    
    - name: Run Documentation Coverage Analysis
      shell: pwsh
      run: |
        chmod +x ./metrics/AnalyzeDocumentationCoverage.ps1
        ./metrics/AnalyzeDocumentationCoverage.ps1
    
    - name: Generate Code Metrics Summary
      shell: pwsh
      run: |
        chmod +x ./metrics/CodeMetricsReport.ps1
        ./metrics/CodeMetricsReport.ps1
    
    - name: Check if metrics meet standards
      id: metrics_check
      shell: pwsh
      run: |
        $report = Get-Content "./metrics/reports/metrics_summary.md" -Raw
        $docReport = Get-Content "./metrics/reports/documentation_report.md" -Raw
        
        # Extract metrics from reports
        $complexity = if ($report -match 'Cyclomatic Complexity \(Avg\) \| (\d+)') { [int]$Matches[1] } else { 99 }
        $maintainability = if ($report -match 'Maintainability Index \| (\d+)') { [int]$Matches[1] } else { 0 }
        $docCoverage = if ($docReport -match 'Public Methods/Properties \| \d+ \| \d+ \| ([\d\.]+)%') { [double]$Matches[1] } else { 0 }
        
        # Set status based on thresholds
        $hasIssues = $false
        $summary = "## Code Quality Check Results\n\n"
        
        if ($complexity -ge 15) {
            $hasIssues = $true
            $summary += "❌ **Cyclomatic Complexity** is too high ($complexity, target <15)\n\n"
        } else {
            $summary += "✅ **Cyclomatic Complexity** is good ($complexity, target <15)\n\n"
        }
        
        if ($maintainability -lt 80) {
            $hasIssues = $true
            $summary += "❌ **Maintainability Index** is too low ($maintainability, target >80)\n\n"
        } else {
            $summary += "✅ **Maintainability Index** is good ($maintainability, target >80)\n\n"
        }
        
        if ($docCoverage -lt 90) {
            $hasIssues = $true
            $summary += "❌ **Documentation Coverage** is insufficient (${docCoverage}%, target >90%)\n\n"
        } else {
            $summary += "✅ **Documentation Coverage** is good (${docCoverage}%, target >90%)\n\n"
        }
        
        # Set output
        "summary=$summary" >> $env:GITHUB_OUTPUT
        "has_issues=$hasIssues" >> $env:GITHUB_OUTPUT
    
    - name: Upload metrics reports
      uses: actions/upload-artifact@v3
      with:
        name: code-metrics-reports
        path: metrics/reports/
        retention-days: 90
    
    - name: Comment PR with metrics summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summaryMarkdown = `${{ steps.metrics_check.outputs.summary }}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summaryMarkdown
          });
    
    - name: Fail if metrics don't meet standards
      if: steps.metrics_check.outputs.has_issues == 'true'
      shell: bash
      run: |
        echo "Code quality metrics don't meet the required standards."
        echo "Please review the PR comment and metrics reports for details."
        exit 1 