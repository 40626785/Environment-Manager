---
config:
  layout: elk
---
classDiagram
    %%Data
    class UserDbContext {
        <<class>>
        +DbSet<User> User
        +UserDbContext(DbContextOptions options)
    }
    class UserDataStore {
        <<class>>
        -UserDbContext _context
        +User GetUser(string username)
    }
    UserDbContext --> User : stores
    UserDataStore --> UserDbContext : abstracts
    UserDataStore ..|> IUserDataStore : implements
    %%Models
    class User {
        <<class>>
        +string Username
        +string Password
        +Roles Role
    }
    class Roles {
        <<enumeration>>
        Administrator
        EnvironmentalScientist
        OperationsManager
    }
    User -- Roles : has
    %%Services
    class IErrorHandling {
        <<interface>>
        +string DisplayError
        +void HandleError(Exception e, string message)
    }
    class IUserDataStore {
        <<interface>>
        +User GetUser(string username)
    }
    class IAuthenticationService {
        <<interface>>
        +bool Authenticated
        +User AuthenticatedUser
        +void Authenticate(string username, string password)
    }
    class ILocalStorageService {
        <<interface>>
        +void SetStringValue(string key, string value)
        +string GetStringValue(string key)
    }
    class ILoginNavService {
        <<interface>>
        +void RouteOnLogin()
        +void RouteOnLogout()
    }
    class IRunOnMainThread {
        <<interface>>
        +void RunMainThread(Action action)
    }
    class ISessionService {
        <<interface>>
        +User AuthenticatedUser
        +DateTime Expiry
        +void NewSession(User user)
    }
    class AuthenticationService {
        <<class>>
        -IUserDataStore _context
        -ISessionService _session
        -bool _authenticated
        -User _authenticatedUser
        -void ConfigureSession()
        +bool Authenticated
        +User AuthenticatedUser
        +void Authenticate(string username, string password)
    }
    class LocalStorageService {
        <<class>>
        +SetStringValue(string key, string value)
        +GetStringValue(string key)
    }
    class LoginNavService {
        <<class>>
        -IServiceProvider _serviceProvider
        +void RouteOnLogin()
        +void RouteOnLogout()
    }
    class RunOnMainThread {
        <<class>>
        +void RunMainThread(Action acion)
    }
    class SessionService {
        <<class>>
        -int _ttl
        -User _authenticatedUser
        -DateTime _expiry
        -ILoginNavService _loginNavService
        -IRunOnMainThread _mainThread
        -ILocalStorageService _storageService
        -Timer _timer
        -void LogoutOnExpire()
        -void StoreRole()
        +User AuthenticatedUser
        +DateTime Expiry
        +void NewSession(User user)
        +void StartTimer()
    }
    AuthenticationService ..|> IAuthenticationService : implements
    AuthenticationService --> IUserDataStore : queries
    AuthenticationService --> ISessionService : creates
    AuthenticationService --> User : authenticates
    SessionService ..|> ISessionService
    SessionService --> ILoginNavService : uses
    SessionService --> IRunOnMainThread : uses
    SessionService --> ILocalStorageService : sends to
    SessionService --> User : contains
    RunOnMainThread ..|> IRunOnMainThread : implements
    LocalStorageService ..|> ILocalStorageService : implements
    LoginNavService ..|> ILoginNavService : implements
    %%View Models
    class LoginViewModel {
        <<class>>
        -IAuthenticationService _authentication
        -ILoginNavService _loginNav
        -string _providedUsername
        -string _providedPassword
        -string _displayError
        +ICommand Login
        +string ProvidedUsername
        +string ProvidedPassword
        +string DisplayError
        +void Authenticate()
        +void HandleError(Exception e, string message)
    }
    LoginViewModel --> IUserDataStore : uses
    LoginViewModel --> IAuthenticationService : uses
    LoginViewModel --> ILoginNavService : uses
    LoginViewModel ..|> IErrorHandling : implements

UserDbContext --> User : stores
    UserDataStore --> UserDbContext : abstracts
    UserDataStore ..|> IUserDataStore : implements